// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationservice

import (
	"context"
	relation "github.com/edufriendchen/tiktok-demo/kitex_gen/relation"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relation.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"ActionRelation":  kitex.NewMethodInfo(actionRelationHandler, newRelationServiceActionRelationArgs, newRelationServiceActionRelationResult, false),
		"GetFollowList":   kitex.NewMethodInfo(getFollowListHandler, newRelationServiceGetFollowListArgs, newRelationServiceGetFollowListResult, false),
		"GetFollowerList": kitex.NewMethodInfo(getFollowerListHandler, newRelationServiceGetFollowerListArgs, newRelationServiceGetFollowerListResult, false),
		"GetFriendList":   kitex.NewMethodInfo(getFriendListHandler, newRelationServiceGetFriendListArgs, newRelationServiceGetFriendListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func actionRelationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceActionRelationArgs)
	realResult := result.(*relation.RelationServiceActionRelationResult)
	success, err := handler.(relation.RelationService).ActionRelation(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceActionRelationArgs() interface{} {
	return relation.NewRelationServiceActionRelationArgs()
}

func newRelationServiceActionRelationResult() interface{} {
	return relation.NewRelationServiceActionRelationResult()
}

func getFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceGetFollowListArgs)
	realResult := result.(*relation.RelationServiceGetFollowListResult)
	success, err := handler.(relation.RelationService).GetFollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceGetFollowListArgs() interface{} {
	return relation.NewRelationServiceGetFollowListArgs()
}

func newRelationServiceGetFollowListResult() interface{} {
	return relation.NewRelationServiceGetFollowListResult()
}

func getFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceGetFollowerListArgs)
	realResult := result.(*relation.RelationServiceGetFollowerListResult)
	success, err := handler.(relation.RelationService).GetFollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceGetFollowerListArgs() interface{} {
	return relation.NewRelationServiceGetFollowerListArgs()
}

func newRelationServiceGetFollowerListResult() interface{} {
	return relation.NewRelationServiceGetFollowerListResult()
}

func getFriendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceGetFriendListArgs)
	realResult := result.(*relation.RelationServiceGetFriendListResult)
	success, err := handler.(relation.RelationService).GetFriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceGetFriendListArgs() interface{} {
	return relation.NewRelationServiceGetFriendListArgs()
}

func newRelationServiceGetFriendListResult() interface{} {
	return relation.NewRelationServiceGetFriendListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ActionRelation(ctx context.Context, req *relation.ActionRequest) (r *relation.ActionResponse, err error) {
	var _args relation.RelationServiceActionRelationArgs
	_args.Req = req
	var _result relation.RelationServiceActionRelationResult
	if err = p.c.Call(ctx, "ActionRelation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowList(ctx context.Context, req *relation.FollowRequest) (r *relation.FollowResponse, err error) {
	var _args relation.RelationServiceGetFollowListArgs
	_args.Req = req
	var _result relation.RelationServiceGetFollowListResult
	if err = p.c.Call(ctx, "GetFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerList(ctx context.Context, req *relation.FollowerRequest) (r *relation.FollowerResponse, err error) {
	var _args relation.RelationServiceGetFollowerListArgs
	_args.Req = req
	var _result relation.RelationServiceGetFollowerListResult
	if err = p.c.Call(ctx, "GetFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFriendList(ctx context.Context, req *relation.FriendRequest) (r *relation.FriendResponse, err error) {
	var _args relation.RelationServiceGetFriendListArgs
	_args.Req = req
	var _result relation.RelationServiceGetFriendListResult
	if err = p.c.Call(ctx, "GetFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
